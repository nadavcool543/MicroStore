name: CI/CD

on:
  push:
    branches: [ dev, staging, main ]
  pull_request:
    branches: [ dev, staging, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Build and start services
        run: docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "Waiting for product-service..."
          while ! curl -f http://localhost:8080/api/products; do sleep 5; done
          echo "Waiting for order-service..."
          while ! curl -f http://localhost:8081/api/orders; do sleep 5; done
          echo "Waiting for frontend..."
          while ! curl -f http://localhost:80; do sleep 5; done
          
      - name: Cleanup
        run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    env:
      AWS_REGION: us-east-1
    permissions:
      id-token: write
      contents: read
    outputs:
      frontend_IMAGE_URI: ${{ steps.build-push.outputs.frontend_IMAGE_URI }}
      product-service_IMAGE_URI: ${{ steps.build-push.outputs.product-service_IMAGE_URI }}
      order-service_IMAGE_URI: ${{ steps.build-push.outputs.order-service_IMAGE_URI }}
    strategy:
      matrix:
        service: [frontend, product-service, order-service]
    steps:
      - uses: actions/checkout@v4
      - name: Set environment name and tag suffix
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
            echo "TAG_SUFFIX=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
            echo "TAG_SUFFIX=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
            echo "TAG_SUFFIX=dev" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch for deployment" && exit 1
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::767397741479:role/GithubRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to ECR
        id: build-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: microstore
          IMAGE_TAG: ${{ matrix.service }}-${{ steps.env.outputs.TAG_SUFFIX }}-${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}/.
          
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image \
            --exit-code 1 \
            --ignore-unfixed \
            --vuln-type os,library \
            --severity HIGH,CRITICAL \
            $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "${{ matrix.service }}_IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  update-gitops:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Set environment name
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch for deployment" && exit 1
          fi
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: nadavcool543/gitops-repo
          token: ${{ secrets.GITOPS_PAT }}
          path: gitops-repo
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
      - name: Update image tags in values.yaml
        run: |
          cd gitops-repo/environments/${{ steps.env.outputs.ENV_NAME }}
          yq eval ".services.frontend.image = \"${{ needs.deploy.outputs.frontend_IMAGE_URI }}\"" -i values.yaml
          yq eval ".services.product.image = \"${{ needs.deploy.outputs.product-service_IMAGE_URI }}\"" -i values.yaml
          yq eval ".services.order.image = \"${{ needs.deploy.outputs.order-service_IMAGE_URI }}\"" -i values.yaml
      - name: Commit and push changes
        run: |
          cd gitops-repo
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add .
          git commit -m "Update ${{ steps.env.outputs.ENV_NAME }} environment images to ${{ github.sha }}"
          git push