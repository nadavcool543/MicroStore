name: CI/CD Pipeline

on:
  push:
    branches: [ dev, staging, main ]
  pull_request:
    branches: [ dev, staging, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and start services
        run: docker-compose up -d --build

      - name: Wait for services to be ready
        run: sleep 30

      - name: Check if services are running
        run: |
          docker-compose ps
          
      - name: Test product-service
        run: |
          curl -f http://localhost:8080/api/products || exit 1
          
      - name: Test order-service
        run: |
          curl -f http://localhost:8081/api/orders || exit 1
          
      - name: Test frontend
        run: |
          curl -f http://localhost:80 || exit 1

      - name: Cleanup
        run: docker-compose down

  build-and-push:
    needs: test
    if: github.event_name == 'push' 
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1

    strategy:
      matrix:
        service: [frontend, product-service, order-service]

    steps:
      - uses: actions/checkout@v4

      - name: Set environment name
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: microstore/${{ matrix.service }}
          IMAGE_TAG: ${{ steps.env.outputs.ENV_NAME }}-${{ github.sha }}
        run: |
          # Build and push with environment-specific SHA tag
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}/.
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Save the image URI for GitOps update
          echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  update-gitops:
    needs: build-and-push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Set environment name
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_NAME=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          fi

      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: https://github.com/nadavcool543/gitops-repo.git
          token: ${{ secrets.GITOPS_PAT }}  
          path: gitops-repo

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Update image tags in values.yaml
        run: |
          cd gitops-repo/environments/${{ steps.env.outputs.ENV_NAME }}
          
          # Update image tags for each service
          for service in frontend product-service order-service; do
            # Get the new image URI for this service
            IMAGE_URI="${{ env.IMAGE_URI }}"
            
            # Update the image tag in values.yaml using yq
            yq eval ".services.${service}.image = \"${IMAGE_URI}\"" -i values.yaml
          done

      - name: Commit and push changes
        run: |
          cd gitops-repo
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add .
          git commit -m "Update ${{ steps.env.outputs.ENV_NAME }} environment images to ${{ github.sha }}"
          git push